getwd()
setwd"C:/Users/sfogel/Documents/Coursera Courses/Reproducible Research"
setwd("C:/Users/sfogel/Documents/Coursera Courses/Reproducible Research")
getwd()
read.csv("activity.csv")
activity<-read.csv("activity.csv")
summary(activity)
activity<-read.csv("activity.csv", colClasses=c("integer", "date", "integer"))
?as.date
as.Date
?as.Date
activity$date<-as.Date(activity$date)
summary(activity)
str(activity)
filepath<-getwd()
activity<-read.csv(file=paste(filepath,"activity.csv", sep="/")
activity$date<-as.Date(activity$date)
activity<-read.csv(file=paste(filepath,"activity.csv", sep="/"))
activity$date<-as.Date(activity$date)
getwd()
getwd()
setwd("C:/Users/Sarah/Documents/Coursera Data Science Specialization/Reproducible Research")
getwd()
??knitr
unzip("activity.zip")
?unzip
unzip("activity.zip")
activity<-read.csv("activity.csv")
activity$date<-as.Date(activity$date)
?as.Date
activity$date<-as.Date(activity$date, format"%Y-%m-%d")
activity$date<-as.Date(activity$date, format="%Y-%m-%d")
str(activity$date)
str(activity)
?Date
summary(activity)
hist(activity$steps)
?split
activity<-read.csv("activity.csv")
split.steps<-split(activity$steps, activity$date)
sapply(split.steps, sum)
activity$steps[which(is.na(activity$steps))]
which(is.na(activity$steps))
length(activity$steps[which(is.na(activity$steps))])
split.steps
head(split.steps)
steps.per.day<-sapply(split.steps, sum)
steps.per.day<-sapply(split.steps, sum)
hist(steps.per.day)
hist(steps.per.day, col="steelblue", main="Histogram of Total Steps per Day")
paste0("Mean = ", mean(steps.per.day)); paste0("Median = ", median(steps.per.day))
paste0("Mean = ", mean(steps.per.day, na.rm=TRUE)); paste0("Median = ", median(steps.per.day))
paste0("Mean = ", mean(steps.per.day, na.rm=TRUE)); paste0("Median = ", median(steps.per.day, na.rm=TRUE))
paste0("Mean = ", round(mean(steps.per.day, na.rm=TRUE)), 2); paste0("Median = ", median(steps.per.day, na.rm=TRUE))
paste0("Mean = ", round(mean(steps.per.day, na.rm=TRUE), 2)); paste0("Median = ", median(steps.per.day, na.rm=TRUE))
plot(activity$steps~activity$interval, type="l")
str(activity)
hist(activity$interval)
?table
split.by.interval<-split(activity$steps, as.factor(activity$interval))
plot(split.by.interval)
mean.per.interval<-sapply(split.by.interval, mean)
?sapply
mean.per.interval<-sapply(split.by.interval, mean, na.rm=TRUE)
names(split.by.interval)
names(mean.per.interval)
plot(mean.per.interval~names(mean.per.interval))
plot(mean.per.interval~names(mean.per.interval), type="l")
?max
max(mean.per.interval)
mean.per.interval[which(max(mean.per.interval)]
mean.per.interval[mean.per.interval == max(mean.per.interval)]
which(max(mean.per.interval))
names(mean.per.interval[mean.per.interval == max(mean.per.interval)])
max(mean.per.interval)
complete.cases(activity)
sum(complete.cases(activity))
sum(!complete.cases(activity))
length(activity$steps[which(is.na(activity$steps))])
activity<-read.csv("activity.csv")
split.steps<-split(activity$steps, activity$date)
steps.per.day<-sapply(split.steps, sum)
split.by.interval<-split(activity$steps, as.factor(activity$interval))
mean.per.interval<-sapply(split.by.interval, mean, na.rm=TRUE)
mean.per.interval
mean.per.interval$1450
mean.per.interval$"1450"
mean.per.interval["1450"]
activity.complete<-activity
for (i in 1:length(activity$steps)){
if (is.na(activity.complete$steps[i])) {
interval<-as.character(activity.complete$interval[i])
activity.complete$steps[i]<-mean.per.interval[interval]
}
}
summary(activity.complete)
summary(activity)
activity<-read.csv("activity.csv")
activity<-data.frame(activity, date2<-activity$date)
activity<-read.csv("activity.csv")
activity<-data.frame(activity, date2=activity$date)
?as.Date
activity$date2<-as.Date(activity$date2, format="%Y-%m-%d")
str(activity$date2)
summary(activity$date2)
sum(is.na(activity$date))
sum(is.na(activity$date2))
sum(is.na(activity$interval))
sum(is.na(activity$steps))
2304/288
?weekdays
weekdays(acivity$date2, abbreviate=F)
weekdays(activity$date2, abbreviate=F)
weekdays<-weekdays(activity$date2)
?as.factor
day.factor<-character(rep("weekday", length(activity.complete$date2)))
activity.complete$date2
activity.complete<-activity
for (i in 1:length(activity$steps)){
if (is.na(activity.complete$steps[i])) {
interval<-as.character(activity.complete$interval[i])
activity.complete$steps[i]<-mean.per.interval[interval]
}
}
day.factor<-character(rep("weekday", length(activity.complete$date2)))
length(activity.complete$date2)
head(rep("weekday", length(activity.complete$date2)))
day.factor<-character(rep("weekday", length(activity.complete$date2)))
ep("weekday", length(activity.complete$date2))
rep("weekday", length(activity.complete$date2))
day.factor<-rep("weekday", length(activity.complete$date2))
day.factor[activity.complete$date2=="Saturday" | activity.complete$date2 == "Sunday"]<-"weekend"
day.factor[activity.complete$date2=="Saturday" | activity.complete$date2 == "Sunday"]<-"weekend"
day.factor[weekdays=="Saturday" | weekdays == "Sunday"]<-"weekend"
day.factor[weekdays=="Saturday" | weekdays == "Sunday"]<-"weekend"
activity.complete<-data.frame(activity.complete, day=as.factor(day.factor))
```
library(lattice)
??lattice
split.weekdays<-split(activity.complete$steps, activity$day)
split.weekdays<-split(activity.complete$steps, activity.complete$day)
?lapply
split.days.intervals<-lapply(split.weekdays,split(activity$steps, as.factor(activity$interval))
)
split.days.intervals<-lapply(FUN= function() {split.weekdays,split(activity$steps, as.factor(activity$interval))})
split.days.intervals<-lapply(split.weekdays,FUN= function() {split(activity$steps, as.factor(activity$interval))})
f<-function() split(activity$steps, as.factor(activity$interval))
split.days.intervals<-lapply(split.weekdays,FUN= f)})
split.days.intervals<-lapply(split.weekdays,FUN= f)
split.days.intervals<-lapply(split.weekdays,FUN= f())
f<-function(x) split(x, as.factor(activity$interval))
split.days.intervals<-lapply(split.weekdays,FUN= f)
split.weekdays<-split(activity.complete[c(1,3)], activity.complete$day)
split.weekdays$weekday[1]
head(split.weekdays$weekday[1])
head(split.weekdays$weekday[2])
f<-function(x) split(x[1], as.factor(x[2]))
split.days.intervals<-lapply(split.weekdays,FUN= f)
split.days.intervals<-lapply(split.weekdays,FUN= f)
f(split.weekdays$weekday)
head(split.weekdays$weekday)
head(split.weekdays$weekday[1])
head(split.weekdays$weekday[2])
str(split.weekdays$weekday[2])
str(split.weekdays$weekday[1])
f(split.weekdays$weekday[1])
str(split.weekdays$weekday[1,])
str(split.weekdays$weekday[,1])
f(split.weekdays$weekday[,1])
f(split.weekdays$weekday)
split(split.weekdays$weekday[,1], as.factor(split.weekdays$weekday[,2]))
f<-function(x) split(x[,1], x[,2])
f(split.weekdays$weekday)
split.days.intervals<-lapply(split.weekdays,FUN= f)
mean.per.interval.days<-sapply(split.days.intervals, mean)
mean.per.interval.days<-sapply(split.days.intervals$weekdays, mean)
mean.per.interval.weekends<-sapply(split.days.intervals$weekends, mean)
mean.per.interval.weekends
mean.per.interval.weekdays
mean.per.interval.weekdays<-sapply(split.days.intervals$weekdays, mean)
mean.per.interval.weekdays
split.days.intervals$weekdays
split.days.intervals$weekday
mean.per.interval.weekday<-sapply(split.days.intervals$weekday, mean)
mean.per.interval.weekend<-sapply(split.days.intervals$weekend, mean)
?rep
day.means.interval.data<-data.frame(int=rbind(names(mean.per.interval.weekday), names(mean.per.interval.weekend)), means=rbind(mean.per.interval.weekday, mean.per.interval.weekend), day=rbind(rep("weekday", length(mean.per.interval.weekday)), rep("weekdend", length(mean.per.interval.weekend)))
)
int=rbind(names(mean.per.interval.weekday), names(mean.per.interval.weekend))
head(int)
int=c(names(mean.per.interval.weekday), names(mean.per.interval.weekend))
head(int)
ay.means.interval.data<-data.frame(int=c(names(mean.per.interval.weekday), names(mean.per.interval.weekend)), means=c(mean.per.interval.weekday, mean.per.interval.weekend), day=c(rep("weekday", length(mean.per.interval.weekday)), rep("weekdend", length(mean.per.interval.weekend))))
int=c(names(mean.per.interval.weekday), names(mean.per.interval.weekend)),
int=c(names(mean.per.interval.weekday), names(mean.per.interval.weekend))
str(int)
means=c(mean.per.interval.weekday, mean.per.interval.weekend)
str(means)
day=c(rep("weekday", length(mean.per.interval.weekday)), rep("weekdend", length(mean.per.interval.weekend)))
str(day)
day.means.interval.data<-data.frame(
int=c(names(mean.per.interval.weekday), names(mean.per.interval.weekend)),
#means=c(mean.per.interval.weekday, mean.per.interval.weekend),
day=c(rep("weekday", length(mean.per.interval.weekday)), rep("weekdend", length(mean.per.interval.weekend))))
day.means.interval.data<-data.frame(
int=c(names(mean.per.interval.weekday), names(mean.per.interval.weekend)),
means=c(mean.per.interval.weekday, mean.per.interval.weekend),
day=c(rep("weekday", length(mean.per.interval.weekday)), rep("weekdend", length(mean.per.interval.weekend))))
library(lattice)
xyplot(means~int|day, data=day.means.interval.data)
xyplot(means~int|day, data=day.means.interval.data, type="l")
day.means.interval.data<-data.frame(
int=c(names(mean.per.interval.weekday), names(mean.per.interval.weekend)),
means=c(mean.per.interval.weekday, mean.per.interval.weekend),
day=c(rep("weekday", length(mean.per.interval.weekday)), rep("weekend", length(mean.per.interval.weekend))))
xyplot(means~int|day, data=day.means.interval.data, type="l")
summary(day.means.interval.data)
day.means.interval.data$int<-as.numeric(as.character(day.means.interval.data$int))
xyplot(means~int|day, data=day.means.interval.data, type="l")
xyplot(means~int|day, data=day.means.interval.data, type="l", layout=c(1,2))
xyplot(means~int|day, data=day.means.interval.data, type="l", layout=c(1,2), xlab="Average Number of Steps")
xyplot(means~int|day, data=day.means.interval.data, type="l", layout=c(1,2), ylab="Average Number of Steps")
xyplot(means~int|day, data=day.means.interval.data, type="l", layout=c(1,2), xlab="Interval", ylab="Average Number of Steps")
paste0("The number of missing values is", sum(!complete.cases(activity)))
?knit2html
knit2html(PA1_template.Rmd, PA1_template.html)
library(knitr)
knit2html(PA1_template.Rmd, PA1_template.html)
getwd()
dir()
knit2html("PA1_template.Rmd", "PA1_template.html")
knit2html("PA1_template.Rmd", "PA1_template.html")
